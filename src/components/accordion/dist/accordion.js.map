{"version":3,"file":"accordion.js","sourceRoot":"","sources":["../accordion.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement, TemplateResult } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { accordionStyles } from './accordion.styles';\nimport \"@simplr-wc/components-core/loading\";\n\n/**\n *   A Accordion element From Simplr Components\n *\n *   Usage\n *\n *   <simplr-accordion>\n *       <label slot=\"label\">Click me to open </label>\n *       <span>\n *           <h2>Let's create something awesome together</h2>\n *           <p>My Name:</p>\n *           <p><b>Phone:</b> +22 1231233</p>\n *           <p><b>Email</b> john.doe@foobar.dot</p>\n *       </span>\n *   </simplr-accordion>\n *\n *   @element simplr-accordion\n *\n *   @prop {boolean} open            - Boolean that is set to true when the accordion is open\n *\n *   @attr {boolean} first           - Boolean set true on the first element in a collection of accordion\n *   @attr {boolean} last            - Boolean set true on the last element in a collection of accordion\n *\n *   @csspart [--border-color=1px solid #d6d1e0]                    - Border of the accordion elements\n *   @csspart [--label-background=none]                             - Background of the accordion label\n *   @csspart [--open-label-background=var(--primary-color)]        - Background of the accordion label when the accordion is open\n *   @csspart [--label-color=#000]                                  - Color of the accordion label\n *   @csspart [--open-label-color=#fff]                             - Color of the accordion label when the accordion is open\n *   @csspart [--label-padding=1rem 0 1rem 1rem]                    - Padding of the label of the accordion\n *   @csspart [--content-padding=1rem]                              - Padding of the accordion content\n *   @csspart [--primary-color=#0087d7]                                   - Primary color for Simplr components\n *\n *   @slot label    - Slot for the label of the accordion\n *   @slot          - Default slot for the content of the accordion\n *\n * */\n@customElement('simplr-accordion')\nexport class SimplrAccordion extends LitElement {\n    @state()\n    contentHeight: number = 0;\n\n    @property({ type: Boolean, reflect: true })\n    loading: boolean = false;\n    @property({ type: Boolean, reflect: true })\n    open: boolean = false;\n    @property({ type: Boolean, reflect: true })\n    protected first: boolean = false;\n    @property({ type: Boolean, reflect: true })\n    protected last: boolean = false;\n\n    firstUpdated() {\n        window.requestAnimationFrame(() => {\n            this.addListeners();\n            this.setOrder();\n            this.tabIndex = 0;\n        });\n    }\n\n    private setOrder() {\n        const accordions = this.parentNode?.querySelectorAll('simplr-accordion');\n        accordions?.forEach((acc, i) => {\n            if (acc === this) {\n                if (i === 0) this.first = true;\n                else if (i === accordions.length - 1) this.last = true;\n            }\n        });\n    }\n\n    private addListeners(): void {\n        const labelSlot = this.shadowRoot?.querySelector(\n            'slot[name=\"label\"]'\n        ) as HTMLSlotElement;\n        labelSlot?.addEventListener('click', () => {\n            this.open = !this.open;\n        });\n        this.addEventListener('keyup', (e: KeyboardEvent) => {\n            if (e.key === ' ' || e.key === \"Enter\") {\n                this.open = !this.open;\n            }\n        });\n    }\n\n    private handleSlotChange() {\n        const slot = this.shadowRoot?.querySelector(\n            'slot:not([name=\"label\"])'\n        ) as HTMLSlotElement;\n        this.contentHeight = slot.offsetHeight;\n        this.style.setProperty('--content-height', this.contentHeight + 'px');\n    }\n\n    render(): TemplateResult {\n        return html`<slot name=\"label\"></slot>\n      <div class=\"container\">\n        <slot @slotchange=${this.handleSlotChange}></slot>\n      </div>\n      ${this.loading ? html`<simplr-loading align=\"right\"></simplr-loading>` : ''}\n  `;\n    }\n\n    static get styles() {\n        return accordionStyles;\n    }\n}\n"]}